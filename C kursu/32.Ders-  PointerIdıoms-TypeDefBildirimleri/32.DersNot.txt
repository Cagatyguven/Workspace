-Hatırlatma: & operandı l-value exp olmalı,ifadenin kendisi r-value
             * operandı adres olacak. l-value
             ++ operandı nesne olacak. operandı l-value olmalı.Kendisi r ve l olabilir.


                               1)  POINTER IDIOMS
                            -------------------------
i)    +- &x++ geçersiz bir ifadedir. x++ bir r value expressiondır. & operandı l-value olmak zorundaydı.
      +- &++x geçersiz bir ifadedir. ++x bir r value expressiondır. & operandı l-value olmak zorundaydı.
      +- ++&x geçersiz bir ifadedir. &x bir r value expressiondır. ++ operatörünün operandı l-value olmak zorundadır.

    -Yani... &x++, &++x, ++&x bizim idiomlarımız değil. Bunları kullanmıyoruz.


ii)   +- *ptr++ = 99 geçerli bir ifadedir. ptr bir nesne, ++ operatörü olabilir. ptr++ r value expressiondır. ptr++ *'ın operandı olabilir.
          bu işlemin açılımı şu: *ptr = 99;
                                 ptr = ptr +1;   
          not: ++ operatörünün ismi dizi ismi olamaz. *array++ ifadesi hatalıdır.

      +- *++ptr = 99 geçerli bir ifadedir. ptr bir nesne, ++ operatörü olabilir. ++ptr r value expressiondır. ++ptr *'ın operandı olabilir.
          bu işlemin açılımı şu:  ptr = ptr +1;
                                  *ptr = 99;
                                
      +- ++*ptr; geçerli bir ifadedir. *ptr, ++'nın operandı ve *ptr, dizinin ilk elamanı yani bu işlem dizinin ilk elemanını arttırıyor.
                          

KISACA:
-------

a) *ptr++ -> ptr'nin gösterdiği nesneye eriş daha sonra ptryi bir arttır.

b) *++ptr -> ptr'nin gösterdiği nesneden bir sonraki nesneye eriş demek.

c) ++*ptr -> *ptr nesnesini bir arttır.


 



                                2) TÜR EŞ İSİM BİLDİRİMLERİ  (typedef bildirimleri)
                            ----------------------------------------------------------
i)      -3 alt başlıktan oluşacak: typedef bildirimleri-1, typedef bildirimleri-2, typedef bildirimleri-3

ii)     -type alias(eş isim): öyle bir isimki bir türün yerine geçebilenv 
    
iii)    -typedef anahtar sözcüğümüz var.
        -Syntax:
                 typedef eş-isim-verilmek-istenentür eş-isim 
                 örnek: typedef int word;

iv)     -typedef int* IPTR; şeklinde bildirim yaptık.
         IPTR p1,p2; dediğimizde bu aslında int *p1, *p2; demek oluyor.

v)      -typedef bildirimleri global scope olabilir veya blok scope olabilir. Nerde bildirildiği önemlidir.

vi)     -karışık typedef bildirimleri için 3 adımı takip etmek gerekiyor;
        a) hangi türe eş isim verecekseniz o türden bir değişken tanımlayın. 
        b) tanımlamanın başına typedef anahtar sözcüğünü yazın
        c) değişkenin yerine tür eş ismini koyun. 



2)A) Neden typedef bildirimi yapılıyor?
---------------------------------------
-Bir türe daha daraltılmış özel bir anlam yüklemek için. Bu sayede kodu okuyana da yazana da kolaylık sağlar.
(mesela programda sık sık para birimlerini kullanılıyorum. para bildirimi kullanıldığını göstermek için "typedef double dolar" gibi bir tanımlama yapabilirim. )

-Kodlarada türlere ilişkin değişiklik yapmayı kolaylaştırıyor.
(kodda sayaç değişken çok fazla kullanılıyor "int cnt = 0;, int prime_cnt=0" gibi.)
(Daha sonra bunları long long int yapmak istediğimizde tüm count değişkenlerinin türünü elle değiştirmek yerine en başta typedef int CNT; ifadesini typedef long long CNT;)

-Karmaşık bildirimlerin anlaşılmasını ve yapılmasını sağlamak için


2)B) Standart Kütüphane Ve typedef bildirimleri
------------------------------------------------
-Bazı tür eş isimleri birden fazla kütüphanede bulunmakta. Mesela: size_t , string-stdio ve stddef kütüphanelerinde bulunmakta.


2)C) size_t standart typedef ismi
------------------------------------
-sizeof operatörünün ürettiği değerin türüdür.

-sizeof-> unsigned int, unsigned long veya unsigned long long olabilir. Bu derleyiciden derleyiciye değişir.
-Kütüphanlerin hepsinde ortaktır.

-standart kütüphane "size_t türünü nerelerde kullanıyor"?
a) Bazı fonksiyonlar parametre değeri olarak size_t istiyorlar
b) Eğer standart bir C fonksiyonu dizi boyutu istiyorsa (dizi boyutu türü)
c) Bir fonksiyonun geri dönüş değeri  yada parametresi bir yazının uzunluğunu istiyor ise (yazı uzunluğu)
d) Bazı fonksiyonlar parametre değeri olarak bir karakterden şu kadar - bir tam sayıdan şu kadar gibi istekleri oluyor. (tane-adet türü)

-Mesela qsort fonksiyonu 2. ve 3. parametresi türü size_t'dir.


2)D) int32_t/int8_t gibi türler(stdint kütüphanesi)
-------------------------------------------------------
-stdint.h kütüphanesinde int32_t gibi türler var. Gömülü sistemlerde işe yaramakta olan ifadelerdir.
-kod yazarken daha çok bytelara odaklanıyoruz. Değişken türünü çok fazla umursamıyoruz.
-Buradaki 32,16,8 biti temsil etmekte. 32 bit -> 4 byte.
